from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.chains import RetrievalQA
from langchain_ollama import OllamaLLM
import os

def main():
    # V√©rifier si l'index FAISS existe
    if not os.path.exists("my_faiss_index"):
        print("‚ùå L'index FAISS n'existe pas. Veuillez d'abord ex√©cuter index_documents.py")
        return

    print("Chargement de l'index FAISS...")
    embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
    vectorstore = FAISS.load_local(
        "my_faiss_index",
        embeddings,
        allow_dangerous_deserialization=True
    )

    # Cr√©er la cha√Æne de question-r√©ponse
    llm = OllamaLLM(model="mistral")
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=vectorstore.as_retriever(search_kwargs={"k": 5}),
        return_source_documents=True
    )

    print("\nüí¨ Posez vos questions (tapez 'quit' pour quitter):")
    while True:
        query = input("\nQuestion: ")
        if query.lower() == 'quit':
            break

        # R√©cup√©rer les documents pertinents
        relevant_docs = vectorstore.similarity_search(query, k=5)
        
        # Afficher le contexte qui sera utilis√©
        print("\nüìö Contexte utilis√© pour la r√©ponse:")
        for i, doc in enumerate(relevant_docs, 1):
            source = doc.metadata.get("source", "Inconnu")
            page = doc.metadata.get("page", "N/A")
            print(f"\n{i}. Document: {source}")
            if page != "N/A":
                print(f"   Page: {page}")
            print(f"   Extrait: {doc.page_content[:200]}...")
        
        # G√©n√©rer la r√©ponse
        print("\nü§ñ G√©n√©ration de la r√©ponse...")
        result = qa_chain.invoke({"query": query})
        print("\nR√©ponse:", result["result"])
        
        # Afficher les sources utilis√©es
        if result["source_documents"]:
            print("\nüìñ Sources utilis√©es:")
            for i, doc in enumerate(result["source_documents"], 1):
                source = doc.metadata.get("source", "Inconnu")
                page = doc.metadata.get("page", "N/A")
                print(f"\n{i}. Document: {source}")
                if page != "N/A":
                    print(f"   Page: {page}")
                print(f"   Extrait: {doc.page_content[:200]}...")

if __name__ == "__main__":
    main() 